---
export interface Props {
  title?: string;
  description?: string;
}

const { 
  title = "Portfolio | Creative Developer",
  description = "Personal portfolio showcasing my work and skills as a developer"
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap" rel="stylesheet">
  </head>
  <body>
    <div class="wrapper">
      <slot />
    </div>
    <script>
      // Check if user prefers dark mode
      const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      // Apply theme based on user preference or localStorage
      const savedTheme = localStorage.getItem('theme');
      const theme = savedTheme || (prefersDarkMode ? 'dark' : 'light');
      
      if (theme === 'dark') {
        document.documentElement.classList.add('dark-mode');
      }
      
      // Enable smooth scrolling for all internal links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (this: HTMLAnchorElement, e) {
          e.preventDefault();
          const href = this.getAttribute('href');
          const target = href ? document.querySelector(href) : null;
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth'
            });
          }
        });
      });
      
      // Intersection Observer for scroll animations
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('in-view');
          }
        });
      }, { threshold: 0.1 });
      
      document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.animate-on-scroll').forEach(el => {
          observer.observe(el);
        });
      });
    </script>
  </body>
</html>

<style is:global>
  :root {
    --color-bg: #F7F9FB;
    --color-text: #2D3142;
    --color-primary: #7D938A;
    --color-secondary: #C57B57;
    --color-accent: #4F5D75;
    --color-card: #FFFFFF;
    --color-border: rgba(0, 0, 0, 0.1);
    
    --space-1: 0.25rem;
    --space-2: 0.5rem;
    --space-3: 1rem;
    --space-4: 1.5rem;
    --space-5: 2rem;
    --space-6: 3rem;
    --space-7: 4rem;
    --space-8: 6rem;
  }
  
  .dark-mode {
    --color-bg: #222831;
    --color-text: #EEEEEE;
    --color-primary: #8C9E92;
    --color-secondary: #D48872;
    --color-accent: #7A8BA0;
    --color-card: #393E46;
    --color-border: rgba(255, 255, 255, 0.1);
  }
  
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }
  
  html,
  body {
    font-family: 'Inter', sans-serif;
    background-color: var(--color-bg);
    color: var(--color-text);
    font-size: 16px;
    line-height: 1.5;
    scroll-behavior: smooth;
    transition: background-color 0.3s ease, color 0.3s ease;
  }
  
  h1, h2, h3, h4, h5, h6 {
    line-height: 1.2;
    margin-bottom: var(--space-3);
    font-weight: 600;
  }
  
  h1 {
    font-size: 2.5rem;
  }
  
  h2 {
    font-size: 2rem;
  }
  
  h3 {
    font-size: 1.5rem;
  }
  
  p {
    margin-bottom: var(--space-3);
  }
  
  a {
    color: var(--color-primary);
    text-decoration: none;
    transition: color 0.2s ease;
  }
  
  a:hover {
    color: var(--color-secondary);
  }
  
  img {
    max-width: 100%;
    height: auto;
  }
  
  .wrapper {
    min-height: 100vh;
    width: 100%;
  }
  
  section {
    padding: var(--space-7) 0;
  }
  
  .container {
    width: 90%;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .button {
    display: inline-block;
    padding: var(--space-2) var(--space-4);
    background-color: var(--color-primary);
    color: white;
    border: none;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease, transform 0.2s ease;
  }
  
  .button:hover {
    background-color: var(--color-secondary);
    transform: translateY(-2px);
  }
  
  .animate-on-scroll {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }
  
  .animate-on-scroll.in-view {
    opacity: 1;
    transform: translateY(0);
  }
  
  .section-title {
    position: relative;
    display: inline-block;
    margin-bottom: var(--space-5);
  }
  
  .section-title::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: -8px;
    width: 60px;
    height: 3px;
    background-color: var(--color-secondary);
  }
  
  @media (max-width: 768px) {
    h1 {
      font-size: 2rem;
    }
    
    h2 {
      font-size: 1.5rem;
    }
    
    section {
      padding: var(--space-5) 0;
    }
  }
</style>